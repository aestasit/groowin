/*
 * Copyright (C) 2011-2020 Aestas/IT
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java-library'
    id 'groovy'
    id 'idea'
    id 'org.ajoberstar.git-publish'
    id 'org.kordamp.gradle.codenarc'
    id 'org.kordamp.gradle.integration-test'
}

config {
    info {
        name          = 'Groowin'
        description   = 'A Groovy-based DSL for working with remote servers over WinRM protocol.'
        inceptionYear = '2011'
        tags          = ['winrm', 'client']
    }

    quality {
        codenarc {
            configFile = project.rootProject.file('src/conf/codenarc/codenarc.groovy')
        }
    }
}

repositories {
    mavenLocal()
}

dependencies {

  api "org.codehaus.groovy:groovy:${groovyVersion}"
  api "org.slf4j:slf4j-api:${slf4jVersion}"
  api "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
  api "ch.qos.logback:logback-classic:${logbackVersion}"
  api "commons-io:commons-io:${commonsIOVersion}"
  api "commons-codec:commons-codec:${commonsCodecVersion}"
  api "com.aestasit.infrastructure.winrm:groovy-winrm-client:${winrmClientVersion}"
  api "jcifs:jcifs:${jcifsVersion}"

  testImplementation "junit:junit:${junitVersion}"
  testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
  testImplementation "org.mockito:mockito-all:${mockitoVersion}"
  testImplementation "com.aestasit.infrastructure.winrm:groovy-winrm-mock:${winrmMockVersion}"
}

gitPublish {
    repoUri = rootProject.extensions.findByName('config').info.links.scm
    branch = 'gh-pages'
    contents {
        from(groovydoc.outputs.files) {
            into 'docs/groovydoc'
        }
    }
}

gitPublishCommit.dependsOn(groovydoc)
